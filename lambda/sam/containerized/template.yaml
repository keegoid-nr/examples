AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: And example of a simple instrumented NodeJS Lambda

Parameters:
  NRAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  NRTrustedAccountKey:
    Type: String
    Description: Your New Relic parent account ID or account ID if no parent; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  SecretsManagerSecretName:
    Type: String
    Description: Your AWS Secrets Manager secret name which holds the New Relic ingest license key.
    AllowedPattern: '[0-9A-Z_-]+'

Globals:
  Function:
    MemorySize: 256
    Timeout: 20
    Environment:
      Variables:
        # agent distributed tracing config
        NEW_RELIC_ACCOUNT_ID: !Ref NRAccountId                         # New Relic account ID
        NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Ref NRTrustedAccountKey        # New Relic account ID or parent ID
        NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: true                    # DT

        # agent serverless config
        NEW_RELIC_NO_CONFIG_FILE: true                                 # Agent uses environment variables in Lambda
        NEW_RELIC_NATIVE_METRICS_ENABLED: false                        # Reduce cold start duration by not collecting VM metrics
        NEW_RELIC_LOG_ENABLED: true                                    # Agent logs
        NEW_RELIC_LOG: stdout                                          # Agent log path
        NEW_RELIC_LOG_LEVEL: info                                      # Agent log level: fatal, error, warn, info, debug, or trace

        # extension config
        NEW_RELIC_LICENSE_KEY_SECRET: !Ref SecretsManagerSecretName    # Secrets Manager secret name for the extension (can override with env var NEW_RELIC_LICENSE_KEY)
        # NEW_RELIC_LICENSE_KEY: !Ref LicenseKey                         # New Relic ingest key, overrides Secrets Manager
        NEW_RELIC_LAMBDA_EXTENSION_ENABLED: true                       # Enable/disable extension
        NEW_RELIC_DATA_COLLECTION_TIMEOUT: 1s                          # Reduce timeout duration when for "Telemetry client error"
        NEW_RELIC_EXTENSION_LOGS_ENABLED: true                         # Enable/disable NR_EXT log lines
        NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS: true                   # Send function logs
        NEW_RELIC_EXTENSION_SEND_EXTENSION_LOGS: true                  # Also send extension logs
        NEW_RELIC_EXTENSION_LOG_LEVEL: DEBUG                           # INFO or DEBUG

Resources:
  KmullaneyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Tags:
        - Key: owner
          Value: kmullaney
        - Key: reason
          Value: demo
        - Key: description
          Value: "Secrets Manager access"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # - Sid: AWSLambdaVPCAccess
              #   Effect: Allow
              #   Action:
              #     - 'ec2:CreateNetworkInterface'
              #     - 'ec2:DescribeNetworkInterfaces'
              #     - 'ec2:DescribeSubnets'
              #     - 'ec2:DeleteNetworkInterface'
              #     - 'ec2:AssignPrivateIpAddresses'
              #     - 'ec2:UnassignPrivateIpAddresses'
              #   Resource: '*'
              - Sid: GetSecretValue
                Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretsManagerSecretName}-*'
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Sid: CloudWatchMetricsAccess
                Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace':
                      - 'AWS/Lambda'

############################

  KmullaneySamContainerizedNodejs20x:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Description: A containerized Lambda function with New Relic instrumentation
      Role: !GetAtt KmullaneyLambdaExecutionRole.Arn
      FunctionName: kmullaney-sam-containerized-nodejs20x
      ImageConfig:
        Command: ["newrelic-lambda-wrapper.handler"]
      Environment:
        Variables:
          NEW_RELIC_APP_NAME: kmullaney-sam-containerized-nodejs20x     # Should be set but not used in the New Relic UI, entity names come from the AWS integration
          NEW_RELIC_LAMBDA_HANDLER: function.handler                    # Your function's actual handler if not using manual wrapping method for better ESM cold start performance
      Tags:
        owner: kmullaney
        reason: "demo"
        description: "A containerized Lambda function with New Relic instrumentation"
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/nodejs20x/
      # DockerTag: latest

  KmullaneySamContainerizedNodejs20xLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${KmullaneySamContainerizedNodejs20x}'
      RetentionInDays: 1
