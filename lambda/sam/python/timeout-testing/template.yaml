AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Testing Python 3.9 instrumentation

Parameters:
  NRAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: "[0-9]+"
  NRTrustedAccountKey:
    Type: String
    Description: Your New Relic parent account ID or account ID if no parent; necessary for distributed tracing.
    AllowedPattern: "[0-9]+"
  LicenseKeyName:
    Type: String
    Description: Your AWS Secrets Manager or Parameter Store name which holds the New Relic ingest license key.
    AllowedPattern: "[0-9A-Z_-]+"
  # SecurityGroupIds:
  #   Type: List<AWS::EC2::SecurityGroup::Id>
  #   Description: The list of Security Group IDs for the Lambda function's VPC configuration.
  # SubnetIds:
  #   Type: List<AWS::EC2::Subnet::Id>
  #   Description: The list of Subnet IDs for the Lambda function's VPC configuration.

Globals:
  Function:
    MemorySize: 256
    Environment:
      Variables:
        # agent distributed tracing config
        NEW_RELIC_ACCOUNT_ID: !Ref NRAccountId # New Relic account ID
        NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Ref NRTrustedAccountKey # New Relic account ID or parent ID
        NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: true # DT

        # agent serverless config
        NEW_RELIC_NO_CONFIG_FILE: true # Agent uses environment variables in Lambda
        NEW_RELIC_PACKAGE_REPORTING_ENABLED: false # disable Python agent package reporting feature to improve cold start times
        NEW_RELIC_LOG_ENABLED: true # Agent logs
        NEW_RELIC_LOG: stderr # Agent log path
        NEW_RELIC_LOG_LEVEL: info # Agent log level: fatal, error, warn, info, debug, or trace
        NEW_RELIC_CLOUD_AWS_ACCOUNT_ID: !Ref AWS::AccountId # AWS account ID

        # extension config
        # NEW_RELIC_LICENSE_KEY: !Ref LicenseKey                         # New Relic ingest key, overrides Secrets Manager
        NEW_RELIC_LAMBDA_EXTENSION_ENABLED: true # Enable/disable extension
        NEW_RELIC_DATA_COLLECTION_TIMEOUT: 2s # Reduce timeout duration when for "Telemetry client error"
        NEW_RELIC_EXTENSION_LOGS_ENABLED: true # Enable/disable NR_EXT log lines
        NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS: true # Send function logs
        NEW_RELIC_EXTENSION_LOG_LEVEL: DEBUG # INFO or DEBUG

Resources:
  KmullaneyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Tags:
        - Key: owner
          Value: kmullaney
        - Key: reason
          Value: testing
        - Key: description
          Value: "python instrumentation"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # - Sid: AWSLambdaVPCAccess
              #   Effect: Allow
              #   Action:
              #     - 'ec2:CreateNetworkInterface'
              #     - 'ec2:DescribeNetworkInterfaces'
              #     - 'ec2:DescribeSubnets'
              #     - 'ec2:DeleteNetworkInterface'
              #     - 'ec2:AssignPrivateIpAddresses'
              #     - 'ec2:UnassignPrivateIpAddresses'
              #   Resource: '*'
              - Sid: GetSecretValue
                Effect: Allow
                Action: "secretsmanager:GetSecretValue"
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${LicenseKeyName}-*"
              - Sid: GetParameterStoreValue
                Effect: Allow
                Action: "ssm:GetParameter"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/NEW_RELIC_LICENSE_KEY"
                # Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${LicenseKeyName}'
              - Sid: KmsDecrypt
                Effect: Allow
                Action: "kms:Decrypt"
                Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
              - Sid: PutDynamoDbItem
                Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DescribeTable"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: CloudWatchMetricsAccess
                Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                Resource: "*"
                Condition:
                  StringEquals:
                    "cloudwatch:namespace":
                      - "AWS/Lambda"

  KmullaneySamPython312HandledRequestTimeout:
    Type: AWS::Serverless::Function
    Properties:
      # In this example, we're using the SAM CLI to package and deploy our lambda. SAM will transform this value during the publish step.
      FunctionName: kmullaney-sam-python-312-handled-request-timeout
      CodeUri: ./src/request_timeout/python312_handled_timeout/
      Description: Testing instrumentation for Python 3.12 with a handled external call that times out
      # The handler for your function needs to be the one provided by the instrumentation layer, below.
      Handler: newrelic_lambda_wrapper.handler
      Timeout: 20
      Runtime: python3.12
      Architectures:
        - arm64
      Role: !GetAtt KmullaneyLambdaExecutionRole.Arn
      PackageType: Zip
      Environment:
        Variables:
          # agent serverless config
          NEW_RELIC_APP_NAME: kmullaney-sam-python-312-handled-request-timeout # Should be set but not used in the New Relic UI, entity names come from the AWS integration
          NEW_RELIC_LAMBDA_HANDLER: function.lambda_handler # The actual function handler
          # extension config
          NEW_RELIC_LICENSE_KEY_SECRET: !Ref LicenseKeyName # Secrets Manager secret name for the extension (can override with env var NEW_RELIC_LICENSE_KEY)
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicPython312ARM64:27
      Tags:
        owner: kmullaney
        reason: testing
        description: "python3.12 instrumentation with a handled external call that times out"

  KmullaneyPython312HandledRequestTimeoutLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${KmullaneySamPython312HandledRequestTimeout}"
      RetentionInDays: 7

  # -------------------------------------------------

  KmullaneySamPython312UnhandledRequestTimeout:
    Type: AWS::Serverless::Function
    Properties:
      # In this example, we're using the SAM CLI to package and deploy our lambda. SAM will transform this value during the publish step.
      FunctionName: kmullaney-sam-python-312-unhandled-request-timeout
      CodeUri: ./src/request_timeout/python312_unhandled_timeout/
      Description: Testing instrumentation for Python 3.12 with an unhandled external call that times out
      # The handler for your function needs to be the one provided by the instrumentation layer, below.
      Handler: newrelic_lambda_wrapper.handler
      Timeout: 20
      Runtime: python3.12
      Architectures:
        - arm64
      Role: !GetAtt KmullaneyLambdaExecutionRole.Arn
      PackageType: Zip
      Environment:
        Variables:
          # agent serverless config
          NEW_RELIC_APP_NAME: kmullaney-sam-python-312-handled-request-timeout # Should be set but not used in the New Relic UI, entity names come from the AWS integration
          NEW_RELIC_LAMBDA_HANDLER: function.lambda_handler # The actual function handler
          # extension config
          NEW_RELIC_LICENSE_KEY_SECRET: !Ref LicenseKeyName # Secrets Manager secret name for the extension (can override with env var NEW_RELIC_LICENSE_KEY)
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicPython312ARM64:27
      Tags:
        owner: kmullaney
        reason: testing
        description: "python3.12 instrumentation with an unhandled external call that times out"

  KmullaneyPython312UnhandledRequestTimeoutLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${KmullaneySamPython312UnhandledRequestTimeout}"
      RetentionInDays: 7

  # -------------------------------------------------

  KmullaneySamPython312HandledRuntimeTimeout:
    Type: AWS::Serverless::Function
    Properties:
      # In this example, we're using the SAM CLI to package and deploy our lambda. SAM will transform this value during the publish step.
      FunctionName: kmullaney-sam-python-312-handled-runtime-timeout
      CodeUri: ./src/runtime_timeout/python312_handled_timeout/
      Description: Testing instrumentation for Python 3.12 with a handled external call that forces a Lambda timeout
      # The handler for your function needs to be the one provided by the instrumentation layer, below.
      Handler: newrelic_lambda_wrapper.handler
      Timeout: 8
      Runtime: python3.12
      Architectures:
        - arm64
      Role: !GetAtt KmullaneyLambdaExecutionRole.Arn
      PackageType: Zip
      Environment:
        Variables:
          # agent serverless config
          NEW_RELIC_APP_NAME: kmullaney-sam-python-312-handled-runtime-timeout # Should be set but not used in the New Relic UI, entity names come from the AWS integration
          NEW_RELIC_LAMBDA_HANDLER: function.lambda_handler # The actual function handler
          # extension config
          NEW_RELIC_LICENSE_KEY_SECRET: !Ref LicenseKeyName # Secrets Manager secret name for the extension (can override with env var NEW_RELIC_LICENSE_KEY)
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicPython312ARM64:27
      Tags:
        owner: kmullaney
        reason: testing
        description: "python3.12 instrumentation with a handled external call that forces a Lambda timeout"

  KmullaneyPython312HandledRuntimeTimeoutLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${KmullaneySamPython312HandledRuntimeTimeout}"
      RetentionInDays: 7

  # -------------------------------------------------

  KmullaneySamPython312UnhandledRuntimeTimeout:
    Type: AWS::Serverless::Function
    Properties:
      # In this example, we're using the SAM CLI to package and deploy our lambda. SAM will transform this value during the publish step.
      FunctionName: kmullaney-sam-python-312-unhandled-runtime-timeout
      CodeUri: ./src/runtime_timeout/python312_unhandled_timeout/
      Description: Testing instrumentation for Python 3.12 with an unhandled external call that forces a Lambda timeout
      # The handler for your function needs to be the one provided by the instrumentation layer, below.
      Handler: newrelic_lambda_wrapper.handler
      Timeout: 8
      Runtime: python3.12
      Architectures:
        - arm64
      Role: !GetAtt KmullaneyLambdaExecutionRole.Arn
      PackageType: Zip
      Environment:
        Variables:
          # agent serverless config
          NEW_RELIC_APP_NAME: kmullaney-sam-python-312-handled-runtime-timeout # Should be set but not used in the New Relic UI, entity names come from the AWS integration
          NEW_RELIC_LAMBDA_HANDLER: function.lambda_handler # The actual function handler
          # extension config
          NEW_RELIC_LICENSE_KEY_SECRET: !Ref LicenseKeyName # Secrets Manager secret name for the extension (can override with env var NEW_RELIC_LICENSE_KEY)
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicPython312ARM64:27
      Tags:
        owner: kmullaney
        reason: testing
        description: "python3.12 instrumentation with an unhandled external call that times out"

  KmullaneyPython312UnhandledRuntimeTimeoutLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${KmullaneySamPython312UnhandledRuntimeTimeout}"
      RetentionInDays: 7
