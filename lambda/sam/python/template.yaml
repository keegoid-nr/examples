AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Testing Python instrumentation with an SQS trigger.

Parameters:
  NRAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: "[0-9]+"
  NRTrustedAccountKey:
    Type: String
    Description: Your New Relic parent account ID or account ID if no parent; necessary for distributed tracing.
    AllowedPattern: "[0-9]+"
  LicenseKeyName:
    Type: String
    Description: Your AWS Secrets Manager or Parameter Store name which holds the New Relic ingest license key.
    AllowedPattern: "[\\w/_-]+"

Globals:
  Function:
    MemorySize: 256
    Timeout: 20
    Environment:
      Variables:
        # agent distributed tracing config
        NEW_RELIC_ACCOUNT_ID: !Ref NRAccountId # New Relic account ID
        NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Ref NRTrustedAccountKey # New Relic account ID or parent ID
        NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: true # DT

        # agent serverless config
        NEW_RELIC_NO_CONFIG_FILE: true # Agent uses environment variables in Lambda
        NEW_RELIC_PACKAGE_REPORTING_ENABLED: false # disable Python agent package reporting feature to improve cold start times
        NEW_RELIC_LOG_ENABLED: true # Agent logs
        NEW_RELIC_LOG: stderr # Agent log path
        NEW_RELIC_LOG_LEVEL: info # Agent log level: fatal, error, warn, info, debug, or trace
        NEW_RELIC_CLOUD_AWS_ACCOUNT_ID: !Ref AWS::AccountId # AWS account ID

        # extension config
        # NEW_RELIC_LICENSE_KEY: !Ref LicenseKey                         # New Relic ingest key, overrides Secrets Manager
        NEW_RELIC_LAMBDA_EXTENSION_ENABLED: true # Enable/disable extension
        NEW_RELIC_DATA_COLLECTION_TIMEOUT: 2s # Reduce timeout duration when for "Telemetry client error"
        NEW_RELIC_EXTENSION_LOGS_ENABLED: true # Enable/disable NR_EXT log lines
        NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS: true # Send function logs
        NEW_RELIC_EXTENSION_LOG_LEVEL: DEBUG # INFO or DEBUG

Resources:
  # --- ADDED THIS SQS QUEUE RESOURCE ---
  MySqsQueue:
    Type: AWS::SQS::Queue

  KmullaneyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Tags:
        - Key: owner
          Value: kmullaney
        - Key: reason
          Value: testing
        - Key: description
          Value: "python instrumentation"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: GetSecretValue
                Effect: Allow
                Action: "secretsmanager:GetSecretValue"
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${LicenseKeyName}-*"
              - Sid: GetParameterStoreValue
                Effect: Allow
                Action: "ssm:GetParameter"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/NEW_RELIC_LICENSE_KEY"
              - Sid: KmsDecrypt
                Effect: Allow
                Action: "kms:Decrypt"
                Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
              - Sid: PutDynamoDbItem
                Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DescribeTable"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: CloudWatchMetricsAccess
                Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                Resource: "*"
                Condition:
                  StringEquals:
                    "cloudwatch:namespace":
                      - "AWS/Lambda"
              # --- ADDED SQS PERMISSIONS ---
              - Sid: SqsAccess
                Effect: Allow
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource: !GetAtt MySqsQueue.Arn
              # -----------------------------
        - PolicyName: LambdaXRayAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"

  # -------------------------------------------------

  KmullaneySamPython311sqs:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: kmullaney-sam-python-311-sqs
      CodeUri: ./src/python311sqs/
      Description: Testing instrumentation for Python 3.11 with SQS trigger.
      Handler: newrelic_lambda_wrapper.handler
      Runtime: python3.11
      Role: !GetAtt KmullaneyLambdaExecutionRole.Arn
      PackageType: Zip
      Tracing: Active # Enable AWS X-Ray tracing for the Lambda function
      Environment:
        Variables:
          NEW_RELIC_APP_NAME: kmullaney-sam-python-311-sqs
          NEW_RELIC_LAMBDA_HANDLER: function.handler
          NEW_RELIC_LAMBDA_EXTENSION_ENABLED: false
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicPython311:51
      Tags:
        owner: kmullaney
        reason: testing
        description: "python3.11 instrumentation with SQS trigger"
      # --- REPLACED API GATEWAY EVENT WITH SQS EVENT ---
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MySqsQueue.Arn
            BatchSize: 10
      # -----------------------------------------------

  KmullaneySamPython311sqsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${KmullaneySamPython311sqs}"
      RetentionInDays: 7

  KmullaneySamPython311sqsSubscriptionfilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:newrelic-log-ingestion-0a20a81d97cd
      FilterPattern: ""
      LogGroupName: !Ref KmullaneySamPython311sqsLogGroup
      FilterName: !Sub "${KmullaneySamPython311sqs}-filter"

  # -------------------------------------------------

  KmullaneySamPython311eventbridge:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: kmullaney-sam-python-311-eventbridge
      CodeUri: ./src/python311eventbridge/
      Description: Testing instrumentation for Python 3.11 with EventBridge trigger and custom payload.
      Handler: newrelic_lambda_wrapper.handler
      Runtime: python3.11
      Role: !GetAtt KmullaneyLambdaExecutionRole.Arn
      PackageType: Zip
      Tracing: Active # Enable AWS X-Ray tracing for the Lambda function
      Environment:
        Variables:
          NEW_RELIC_APP_NAME: kmullaney-sam-python-311-eventbridge
          NEW_RELIC_LAMBDA_HANDLER: function.handler
          NEW_RELIC_LAMBDA_EXTENSION_ENABLED: false
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicPython311:51
      Tags:
        owner: kmullaney
        reason: testing
        description: "python3.11 instrumentation with EventBridge trigger and custom payload"
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Name: custom-eventbridge-payload-trigger
            Description: "Fires every 5 minutes with a custom JSON payload that adds event metadata."
            Schedule: rate(5 minutes)
            Input: !Sub |
              {
                "Records": [
                  {
                    "messageId": "a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8",
                    "receiptHandle": "ReceiptHandleForEventBridge",
                    "body": "This is a test message from an EventBridge schedule designed to add event metadata.",
                    "attributes": {
                      "ApproximateReceiveCount": "1",
                      "SentTimestamp": "1679587200000",
                      "SenderId": "AROAIASKVA53IEXAMPLE",
                      "ApproximateFirstReceiveTimestamp": "1679587200001"
                    },
                    "messageAttributes": {},
                    "md5OfBody": "79054025255fb1a26e4bc422aef54eb4",
                    "eventSource": "aws:events",
                    "eventSourceARN": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/custom-eventbridge-payload-trigger",
                    "awsRegion": "${AWS::Region}"
                  }
                ]
              }
      # -----------------------------------------------------------

  KmullaneySamPython311eventbridgeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${KmullaneySamPython311eventbridge}"
      RetentionInDays: 7

  KmullaneySamPython311eventbridgeSubscriptionfilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:newrelic-log-ingestion-0a20a81d97cd
      FilterPattern: ""
      LogGroupName: !Ref KmullaneySamPython311eventbridgeLogGroup
      FilterName: !Sub "${KmullaneySamPython311eventbridge}-filter"
