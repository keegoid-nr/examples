AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: And example of a simple instrumented NodeJS Lambda

Parameters:
  NRAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  NRTrustedAccountKey:
    Type: String
    Description: Your New Relic parent account ID or account ID if no parent; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: The list of Security Group IDs for the Lambda function's VPC configuration.
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of Subnet IDs for the Lambda function's VPC configuration.

Resources:
  KmullaneyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Tags:
        - Key: owner
          Value: kmullaney
        - Key: reason
          Value: case
        - Key: description
          Value: "00182486"
      Policies:
        - PolicyName: LambdaEC2AndSecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AWSLambdaVPCAccessExecutionPermissions
                Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:AssignPrivateIpAddresses'
                  - 'ec2:UnassignPrivateIpAddresses'
                Resource: '*'
              - Sid: GetSecretValue
                Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:NEW_RELIC_LICENSE_KEY-*'
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Sid: CloudWatchMetricsAccess
                Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace':
                      - 'AWS/Lambda'

  KmullaneySamNoOutboundVpcNodejs18x:
    Type: AWS::Serverless::Function
    Properties:
      # In this example, we're using the SAM CLI to package and deploy our lambda. SAM will transform this value during the publish step.
      Description: Testing instrumentation when the function cannot reach NR
      FunctionName: kmullaney-sam-no-outbound-vpc-nodejs18x
      CodeUri: src/
      # The handler for your function needs to be the one provided by the instrumentation layer, below.
      Handler: newrelic-lambda-wrapper.handler
      Runtime: nodejs18.x
      Role: !GetAtt KmullaneyLambdaExecutionRole.Arn
      MemorySize: 1024
      Timeout: 6
      PackageType: Zip
      Environment:
        Variables:
          NEW_RELIC_ACCOUNT_ID: !Ref NRAccountId                       # New Relic account ID
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Ref NRTrustedAccountKey      # New Relic account ID or parent ID
          NEW_RELIC_NO_CONFIG_FILE: true                               # Agent uses environment variables in Lambda
          NEW_RELIC_APP_NAME: kmullaney-sam-no-outbound-vpc-nodejs18x  # Should be set but not used in the New Relic UI, entity names come from the AWS integration
          NEW_RELIC_NATIVE_METRICS_ENABLED: false                      # Reduce cold start duration by not collecting VM metrics
          NEW_RELIC_LAMBDA_HANDLER: function.handler                   # The actual function handler
          NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS: true                 # Send logs via [NR_EXT]
          NEW_RELIC_EXTENSION_LOG_LEVEL: DEBUG                         # Extension log level
          NEW_RELIC_DATA_COLLECTION_TIMEOUT: 1s                        # Reduce timeout duration when for "Telemetry client error"
          NEW_RELIC_LOG_ENABLED: true                                  # Agent logs
          NEW_RELIC_LOG: stdout                                        # Agent log path
          NEW_RELIC_LOG_LEVEL: trace                                   # Agent log level
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicNodeJS18X:58
      Policies:
        # This policy allows the lambda to know the value of the New Relic license key. We need this so
        # that we can send telemetry back to New Relic
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN
      VpcConfig:
        SubnetIds: !Ref SubnetIds
        SecurityGroupIds: !Ref SecurityGroupIds
        Ipv6AllowedForDualStack: false
      Tags:
        owner: kmullaney
        reason: case
        description: 00182486

  KmullaneyNoOutboundVpcLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${KmullaneySamNoOutboundVpcNodejs18x}'
      RetentionInDays: 3
