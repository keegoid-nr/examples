AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: And example of a simple instrumented NodeJS Lambda

Parameters:
  NRAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  NRTrustedAccountKey:
    Type: String
    Description: Your New Relic parent account ID or account ID if no parent; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  SecretsManagerSecretName:
    Type: String
    Description: Your AWS Secrets Manager secret name which holds the New Relic ingest license key.
    AllowedPattern: '[0-9A-Z_-]+'

Resources:
  KmullaneyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Tags:
        - Key: owner
          Value: kmullaney
        - Key: reason
          Value: demo
        - Key: description
          Value: "Secrets Manager access"
      Policies:
        - PolicyName: LambdaSecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: GetSecretValue
                Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretsManagerSecretName}-*'
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Sid: CloudWatchMetricsAccess
                Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace':
                      - 'AWS/Lambda'

  KmullaneySamExtensionOnlyNodejs18x:
    Type: AWS::Serverless::Function
    Properties:
      # In this example, we're using the SAM CLI to package and deploy our lambda. SAM will transform this value during the publish step.
      CodeUri: src/
      Description: A simple Lambda, with New Relic telemetry
      Tags:
        owner: kmullaney
        reason: demo
        description: demo a Lambda using SAM deploy and extension-only layer
      FunctionName: kmullaney-sam-extension-only-nodejs18x
      # The handler for your function needs to be the one provided by the instrumentation layer, below.
      # Handler: newrelic-lambda-wrapper.handler
      Role: !GetAtt KmullaneyLambdaExecutionRole.Arn
      Handler: function.handler
      Runtime: nodejs18.x
      PackageType: Zip
      Environment:
        Variables:
          # agent distributed tracing config
          NEW_RELIC_ACCOUNT_ID: !Ref NRAccountId                         # New Relic account ID
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Ref NRTrustedAccountKey        # New Relic account ID or parent ID
          NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: true                    # DT

          # agent serverless config
          NEW_RELIC_NO_CONFIG_FILE: true                                 # Agent uses environment variables in Lambda
          NEW_RELIC_APP_NAME: kmullaney-sam-extension-only-nodejs18x     # the function will be named the same as in AWS
          NEW_RELIC_NATIVE_METRICS_ENABLED: false                        # Reduce cold start duration by not collecting VM metrics
          NEW_RELIC_LOG_ENABLED: true                                    # Agent logs
          NEW_RELIC_LOG: stdout                                          # Agent log path
          NEW_RELIC_LOG_LEVEL: info                                      # Agent log level: fatal, error, warn, info, debug, or trace
          NEW_RELIC_USE_ESM: true                                        # ESM functions that use async/await and not callbacks

          # extension config
          NEW_RELIC_LICENSE_KEY_SECRET: !Ref SecretsManagerSecretName    # Secrets Manager secret name for the extension (can override with env var NEW_RELIC_LICENSE_KEY)
          # NEW_RELIC_LICENSE_KEY: !Ref LicenseKey                         # New Relic ingest key, overrides Secrets Manager
          # NEW_RELIC_LAMBDA_HANDLER: function.handler                     # Your function's actual handler if not using manual wrapping method for better ESM cold start performance
          NEW_RELIC_LAMBDA_EXTENSION_ENABLED: true                       # Enable/disable extension
          NEW_RELIC_DATA_COLLECTION_TIMEOUT: 1s                          # Reduce timeout duration when for "Telemetry client error"
          NEW_RELIC_EXTENSION_LOGS_ENABLED: true                         # Enable/disable NR_EXT log lines
          NEW_RELIC_EXTENSION_LOG_LEVEL: DEBUG                           # INFO or DEBUG
          NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS: true                   # Send function logs
      Layers:
        # This layer includes the New Relic Lambda Extension, a sidecar process that sends telemetry,
        # as well as the New Relic Agent for Node.js, and a handler wrapper that makes integration easy.
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicLambdaExtension:37
      # Policies:
        # This policy allows the lambda to know the value of the New Relic license key. We need this so
        # that we can send telemetry back to New Relic
        # - AWSSecretsManagerGetSecretValuePolicy:
        #     SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN
  Logs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${KmullaneySamExtensionOnlyNodejs18x}'
      # Lambda functions will auto-create their log group on first execution, but it retains logs forever, which can get expensive.
      RetentionInDays: 3
