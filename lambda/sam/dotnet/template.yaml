AWSTemplateFormatVersion: 2010-09-09
Description: >-
  MyDotnetLambda
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  NRAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  NRTrustedAccountKey:
    Type: String
    Description: Your New Relic parent account ID or account ID if no parent; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  SecretsManagerSecretName:
    Type: String
    Description: Your AWS Secrets Manager secret name which holds the New Relic ingest license key.
    AllowedPattern: '[0-9A-Z_-]+'

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    MemorySize: 256
    Timeout: 10
    Runtime: dotnet6
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        # agent distributed tracing config
        NEW_RELIC_ACCOUNT_ID: !Ref NRAccountId                         # New Relic account ID
        NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Ref NRTrustedAccountKey        # New Relic account ID or parent ID
        NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: true                    # DT
        NEW_RELIC_PRIMARY_APPLICATION_ID: unknown                      # Set this to identify the primary application ID. By default the value is "unknown"

        # agent serverless config
        CORECLR_ENABLE_PROFILING: 1                                    # For .NET Core
        CORECLR_PROFILER: '{36032161-FFC0-4B61-B559-F6C5D41BAE5A}'     # For .NET Core
        CORECLR_NEWRELIC_HOME: newrelic                                # This should be the relative path to the directory containing the New Relic .NET Agent. By default, the NuGet package will place the agent in a folder named "newrelic" in your build output directory
        CORECLR_PROFILER_PATH: newrelic/libNewRelicProfiler.so         # This is the relative path to the profiler used by the .NET agent. There is a different profiler for x64 and arm64. Be sure to use the correct one for your function.
        NEW_RELIC_LOG_CONSOLE: 1                                       # Send log messages to the console (CloudWatch)
        NEW_RELIC_LOG_ENABLED: 1                                       # Agent logs
        NEWRELIC_LOG_LEVEL: finest                                     # off|error|warn|info|debug|finest|all

        # extension config
        NEW_RELIC_LICENSE_KEY_SECRET: !Ref SecretsManagerSecretName    # Secrets Manager secret name for the extension (can override with env var NEW_RELIC_LICENSE_KEY)
        # NEW_RELIC_LICENSE_KEY: !Ref LicenseKey                         # New Relic ingest key, overrides Secrets Manager
        NEW_RELIC_LAMBDA_EXTENSION_ENABLED: true                       # Enable/disable extension
        NEW_RELIC_DATA_COLLECTION_TIMEOUT: 1s                          # Reduce timeout duration when for "Telemetry client error"
        NEW_RELIC_EXTENSION_LOGS_ENABLED: true                         # Enable/disable NR_EXT log lines
        NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS: true                   # Send function logs
        NEW_RELIC_EXTENSION_LOG_LEVEL: DEBUG                           # INFO or DEBUG

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  KmullaneyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Tags:
        - Key: owner
          Value: kmullaney
        - Key: reason
          Value: demo
        - Key: description
          Value: "Secrets Manager access"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # - Sid: AWSLambdaVPCAccess
              #   Effect: Allow
              #   Action:
              #     - 'ec2:CreateNetworkInterface'
              #     - 'ec2:DescribeNetworkInterfaces'
              #     - 'ec2:DescribeSubnets'
              #     - 'ec2:DeleteNetworkInterface'
              #     - 'ec2:AssignPrivateIpAddresses'
              #     - 'ec2:UnassignPrivateIpAddresses'
              #   Resource: '*'
              - Sid: GetSecretValue
                Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretsManagerSecretName}-*'
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Sid: CloudWatchMetricsAccess
                Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace':
                      - 'AWS/Lambda'

############################

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  KmullaneySamDotnet6:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/MyDotnetLambda/src/ScratchLambda/
      Description: A basic Dotnet 6 Lambda function that returns a string.
      Handler: ScratchLambda::ScratchLambda.Function::FunctionHandler
      Architectures:
      - x86_64
      Role: !GetAtt KmullaneyLambdaExecutionRole.Arn
      PackageType: Zip
      FunctionName: kmullaney-sam-dotnet6
      Environment:
        Variables:
          # agent serverless config
          NEW_RELIC_APP_NAME: kmullaney-sam-dotnet6                      # Should be set but not used in the New Relic UI, entity names come from the AWS integration
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicDotnet:3
      # Policies:
        # This policy allows the lambda to know the value of the New Relic license key. We need this so
        # that we can send telemetry back to New Relic
        # - AWSSecretsManagerGetSecretValuePolicy:
        #     SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN
      Tags:
        owner: kmullaney
        reason: "demo"
        description: "Demo new Dotnet layer"

  KmullaneySamDotnet6LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${KmullaneySamDotnet6}'
      RetentionInDays: 3

