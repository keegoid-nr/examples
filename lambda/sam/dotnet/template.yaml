AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for dotnet8

Parameters:
  NRAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  NRTrustedAccountKey:
    Type: String
    Description: Your New Relic parent account ID or account ID if no parent; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  SecretsManagerSecretName:
    Type: String
    Description: Your AWS Secrets Manager secret name which holds the New Relic ingest license key.
    AllowedPattern: '[0-9A-Z_-]+'

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    MemorySize: 512
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        # agent distributed tracing config
        NEW_RELIC_ACCOUNT_ID: !Ref NRAccountId                         # New Relic account ID
        NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Ref NRTrustedAccountKey        # New Relic account ID or parent ID
        NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: true                    # Enable Distributed Tracing
        # NEW_RELIC_PRIMARY_APPLICATION_ID: unknown                      # Set this to identify the primary application ID. By default the value is "unknown"

        # required agent serverless config
        CORECLR_ENABLE_PROFILING: 1                                                    # For .NET Core
        CORECLR_PROFILER: '{36032161-FFC0-4B61-B559-F6C5D41BAE5A}'                     # For .NET Core
        CORECLR_PROFILER_PATH: /opt/lib/newrelic-dotnet-agent/libNewRelicProfiler.so   # Path to the profiler used by the .NET agent
        CORECLR_NEW_RELIC_HOME: /opt/lib/newrelic-dotnet-agent                         # Path to the directory containing the New Relic .NET Agent
        NEW_RELIC_LOG_CONSOLE: 1                                                       # Send log messages to the console (stdout/CloudWatch)
        NEW_RELIC_CLOUD_AWS_ACCOUNT_ID: !Ref AWS::AccountId                            # AWS account ID

        # optional agent serverless config
        NEW_RELIC_LOG_ENABLED: 1                                                       # Agent logs
        NEW_RELIC_LOG_LEVEL: finest                                                    # info|debug|finest

        # extension config
        NEW_RELIC_LAMBDA_EXTENSION_ENABLED: true                         # Enable/disable extension
        NEW_RELIC_LICENSE_KEY_SECRET: !Ref SecretsManagerSecretName    # Secrets Manager secret name for the extension (can override with env var NEW_RELIC_LICENSE_KEY)
        # NEW_RELIC_LICENSE_KEY: !Ref LicenseKey                         # New Relic ingest key, overrides Secrets Manager
        NEW_RELIC_DATA_COLLECTION_TIMEOUT: 2s                          # Reduce timeout duration when for "Telemetry client error"
        NEW_RELIC_EXTENSION_LOGS_ENABLED: true                         # Enable/disable [NR_EXT] log lines
        NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS: true                   # Send function logs
        NEW_RELIC_EXTENSION_SEND_EXTENSION_LOGS: false                 # Also send extension logs
        NEW_RELIC_EXTENSION_LOG_LEVEL: DEBUG                           # INFO or DEBUG
        NEW_RELIC_IGNORE_EXTENSION_CHECKS: all                         # Ignore extension checks

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  KmullaneyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Tags:
        - Key: owner
          Value: kmullaney
        - Key: reason
          Value: demo
        - Key: description
          Value: "Secrets Manager access"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # - Sid: AWSLambdaVPCAccess
              #   Effect: Allow
              #   Action:
              #     - 'ec2:CreateNetworkInterface'
              #     - 'ec2:DescribeNetworkInterfaces'
              #     - 'ec2:DescribeSubnets'
              #     - 'ec2:DeleteNetworkInterface'
              #     - 'ec2:AssignPrivateIpAddresses'
              #     - 'ec2:UnassignPrivateIpAddresses'
              #   Resource: '*'
              - Sid: GetSecretValue
                Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretsManagerSecretName}-*'
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Sid: CloudWatchMetricsAccess
                Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace':
                      - 'AWS/Lambda'

############################

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  # KmullaneySamDotnet6HelloWorld:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: ./src/dotnet6/src/HelloWorld/
  #     Description: A basic Dotnet 6 Hello World Lambda function using APIGatewayProxyRequest.
  #     Runtime: dotnet6
  #     Handler: HelloWorld::HelloWorld.Function::FunctionHandler
  #     Architectures:
  #     - x86_64
  #     Role: !GetAtt KmullaneyLambdaExecutionRole.Arn
  #     PackageType: Zip
  #     FunctionName: kmullaney-sam-dotnet6-helloworld
  #     # Environment:
  #     #   Variables:
  #         # agent serverless config
  #         # NEW_RELIC_APP_NAME: kmullaney-sam-dotnet6-helloworld                               # Should be set but not used in the New Relic UI, entity names come from the AWS integration
  #         # NEW_RELIC_LAMBDA_HANDLER: HelloWorld::HelloWorld.Function::FunctionHandler         # Required if the runtime handler is not in the assembly::class::method format i.e. RuntimeSupport library
  #     Layers:
  #       - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicDotnet:6
  #     # Policies:
  #       # This policy allows the lambda to know the value of the New Relic license key. We need this so
  #       # that we can send telemetry back to New Relic
  #       # - AWSSecretsManagerGetSecretValuePolicy:
  #       #     SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN
  #     Events:
  #       KmullaneySamDotnet6HelloWorld:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           Path: /hello
  #           Method: get
  #     Tags:
  #       owner: kmullaney
  #       reason: "demo"
  #       description: "Demo new Dotnet layer"

  # KmullaneySamDotnet6HelloWorldLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub '/aws/lambda/${KmullaneySamDotnet6HelloWorld}'
  #     RetentionInDays: 1

############################

  KmullaneySamDotnet8HelloWorld:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/dotnet8/src/HelloWorld/
      Description: A basic Dotnet 8 Hello World Lambda function using APIGatewayProxyRequest.
      Handler: HelloWorld::HelloWorld.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
      - x86_64
      Role: !GetAtt KmullaneyLambdaExecutionRole.Arn
      PackageType: Zip
      FunctionName: kmullaney-sam-dotnet8-helloworld
      # Environment:
        # Variables:
          # agent serverless config
          # NEW_RELIC_LAMBDA_HANDLER: HelloWorld::HelloWorld.Function::FunctionHandler         # Required if the runtime handler is not in the assembly::class::method format i.e. RuntimeSupport library
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicDotnet:20
      # Policies:
        # This policy allows the lambda to know the value of the New Relic license key. We need this so
        # that we can send telemetry back to New Relic
        # - AWSSecretsManagerGetSecretValuePolicy:
        #     SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN
      Events:
        KmullaneySamDotnet8HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
      Tags:
        owner: kmullaney
        reason: "demo"
        description: "Demo new Dotnet layer"

  KmullaneySamDotnet8HelloWorldLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${KmullaneySamDotnet8HelloWorld}'
      RetentionInDays: 1

############################

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  KmullaneySamDotnet8HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  KmullaneySamDotnet8HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt KmullaneySamDotnet8HelloWorld.Arn
  KmullaneySamDotnet8HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt KmullaneyLambdaExecutionRole.Arn
