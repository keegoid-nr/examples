AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: And example of a simple instrumented NodeJS Lambda

Parameters:
  NRAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  NRTrustedAccountKey:
    Type: String
    Description: Your New Relic parent account ID or account ID if no parent; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'

Resources:
  KmullaneySamEsmNodejs18x:
    Type: AWS::Serverless::Function
    Properties:
      # In this example, we're using the SAM CLI to package and deploy our lambda. SAM will transform this value during the publish step.
      CodeUri: src/
      Description: A simple Lambda, with New Relic telemetry
      FunctionName: kmullaney-sam-esm-nodejs18x
      # If not using ESM, this should be newrelic-lambda-wrapper.handler provided by the instrumentation layer.
      # If using ESM, bypass newrelic-lambda-wrapper.handler to avoid RITM slow dependency loading by setting the actual function handler here.
      Handler: function.handler
      Runtime: nodejs18.x
      MemorySize: 256
      Timeout: 20
      PackageType: Zip
      Environment:
        Variables:
          # agent distributed tracing config
          NEW_RELIC_ACCOUNT_ID: !Ref NRAccountId                       # New Relic account ID
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Ref NRTrustedAccountKey      # New Relic account ID or parent ID
          NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: true                  # DT

          # agent serverless config
          NEW_RELIC_NO_CONFIG_FILE: true                               # Agent uses environment variables in Lambda
          NEW_RELIC_APP_NAME: kmullaney-sam-esm-nodejs18x              # Should be set but not used in the New Relic UI, entity names come from the AWS integration
          NEW_RELIC_NATIVE_METRICS_ENABLED: false                      # Reduce cold start duration by not collecting VM metrics
          NEW_RELIC_LOG_ENABLED: true                                  # Agent logs
          NEW_RELIC_LOG: stdout                                        # Agent log path
          NEW_RELIC_LOG_LEVEL: info                                    # Agent log level: fatal, error, warn, info, debug, or trace
          NEW_RELIC_USE_ESM: true                                      # ESM functions that use async/await and not callbacks

          # extension config
          NEW_RELIC_LAMBDA_EXTENSION_ENABLED: true                     # Enable/disable extension
          # NEW_RELIC_LICENSE_KEY: !Ref LicenseKey                       # New Relic ingest key, overrides Secrets Manager
          # NEW_RELIC_LICENSE_KEY_SECRET: !Ref LicenseKeySecret          # Custom secret name in AWS Secrets Manager, defaults to NEW_RELIC_LICENSE_KEY
          # NEW_RELIC_LAMBDA_HANDLER: function.handler                   # Your function's actual handler if not using manual wrapping method for better ESM cold start performance
          NEW_RELIC_DATA_COLLECTION_TIMEOUT: 1s                        # Reduce timeout duration when for "Telemetry client error"
          NEW_RELIC_EXTENSION_LOGS_ENABLED: true                       # Enable/disable NR_EXT log lines
          NEW_RELIC_EXTENSION_LOG_LEVEL: INFO                          # INFO or DEBUG
          NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS: true                 # Send function logs
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicNodeJS18X:51
      Policies:
        # This policy allows the lambda to know the value of the New Relic license key. We need this so
        # that we can send telemetry back to New Relic
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN

  KmullaneyNodejs18LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${KmullaneySamEsmNodejs18x}'
      RetentionInDays: 3
